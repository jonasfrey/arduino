/*
  Simple "Hello World" for ILI9341 LCD

  https://wokwi.com/arduino/projects/308024602434470466
*/

// https://wokwi.com/projects/364286042641552385

#include "SPI.h"
#include "Adafruit_GFX.h"
#include "Adafruit_ILI9341.h"

#define TFT_DC 9
#define TFT_CS 10
Adafruit_ILI9341 o_tft = Adafruit_ILI9341(TFT_CS, TFT_DC);

struct O_text
{
    char * s_text;
    char * s_text__last;
    int n_cursor_x;
    int n_cursor_x__last;
    int n_cursor_y;
    int n_cursor_y__last;
    int n_color;
    int n_color__last;
    int n_text_size;
    int n_text_size__last;
};


void f_init_o_text(
    O_text * o_text,
    char * s_text,
    int n_cursor_x,
    int n_cursor_y,
    int n_color,
    int n_text_size
){
    o_text->s_text = s_text;
    o_text->s_text__last = s_text;
    o_text->n_cursor_x = n_cursor_x;
    o_text->n_cursor_x__last = n_cursor_x;
    o_text->n_cursor_y = n_cursor_y;
    o_text->n_cursor_y__last = n_cursor_y;
    o_text->n_color = n_color;
    o_text->n_color__last = n_color;
    o_text->n_text_size = n_text_size;
    o_text->n_text_size__last = n_text_size;

}
void f_update_o_text(
    O_text * o_text,
    int n_clear_color
){
    if(
        // strcmp(o_text->s_text, o_text->s_text__last)
        // // o_text->s_text != o_text->s_text__last
        //     || 
        // o_text->n_cursor_x != o_text->n_cursor_x__last
        //     || 
        // o_text->n_cursor_y != o_text->n_cursor_y__last
        //     || 
        // o_text->n_color != o_text->n_color__last
        //     || 
        // o_text->n_text_size != o_text->n_text_size__last
        1
    ){
        //__last
        o_tft.setCursor(
            o_text->n_cursor_x__last,
            o_text->n_cursor_y__last
        );
        o_tft.setTextColor(
            n_clear_color
        );
        o_tft.setTextSize(
            o_text->n_text_size__last
        );
        o_tft.println(
            o_text->s_text__last
        );

        //new
        o_tft.setCursor(
            o_text->n_cursor_x,
            o_text->n_cursor_y
        );
        o_tft.setTextColor(
            o_text->n_color
        );
        o_tft.setTextSize(
            o_text->n_text_size
        );
        o_tft.println(
            o_text->s_text
        );

        o_text->s_text__last = o_text->s_text;
        o_text->n_cursor_x__last = o_text->n_cursor_x;
        o_text->n_cursor_y__last = o_text->n_cursor_y;
        o_text->n_color__last = o_text->n_color;
        o_text->n_text_size__last = o_text->n_text_size;
    };
}

struct O_text o_text;
struct O_text o_text2;
char s_text[200] = "test";
char s_text2[200] = "o";

int n_color_background = ILI9341_BLACK;
void setup() {

Serial.begin(9600);
  o_tft.begin();

  o_tft.setCursor(26, 120);
  o_tft.setTextColor(ILI9341_RED);
  o_tft.setTextSize(3);
  o_tft.println("Hello, TFT!");

  o_tft.setCursor(20, 160);
  o_tft.setTextColor(ILI9341_GREEN);
  o_tft.setTextSize(2);
  o_tft.println("I can has colors?");

  o_tft.fillScreen(n_color_background);

    f_init_o_text(
        &o_text,
        s_text, //char * s_text
        0, //int n_cursor_x,
        0, //int n_cursor_y,
        0xff00, //int n_color,
        3 //int n_text_size,
    );
    
    
    f_init_o_text(
        &o_text2,
        s_text2, //char * s_text
        0, //int n_cursor_x,
        0, //int n_cursor_y,
        ILI9341_RED, //int n_color,
        2 //int n_text_size,
    );
  // Meme reference: https://english.stackexchange.com/questions/20356/origin-of-i-can-haz

  uint16_t a_n_u16 [ 1775 ] = {0,28159,0,0,2563,28159,4,0,23847,28159,40,0,43592,28160,73,0,49233,28160,82,0,48720,28160,81,0,48720,28160,81,0,49746,28160,83,0,43848,28160,73,0,4358,28159,7,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,4614,28159,7,0,36925,28160,62,0,47438,28160,79,0,46156,28160,77,0,19744,28159,33,0,0,28159,0,0,14102,28159,23,0,44361,28160,74,0,47695,28160,80,0,41797,28160,70,0,8717,28159,14,0,0,28159,0,0,19487,28159,32,0,44618,28160,75,0,45900,28160,77,0,34873,28160,58,0,4614,28159,7,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,255,0,65534,65280,255,0,65534,65280,255,0,65534,65280,255,0,65534,65280,255,0,65534,65280,255,0,65534,65280,255,0,65534,28160,0,3845,28159,6,0,42310,28160,71,0,65389,28160,110,0,65389,28160,110,0,65389,28160,110,0,65389,28160,110,0,65389,28160,110,0,65389,28160,110,0,60260,28160,101,0,6666,28159,11,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,7179,28159,12,0,53593,28160,90,0,65389,28160,110,0,65389,28160,110,0,28975,28160,48,0,0,28159,0,0,21026,28159,35,0,64106,28160,107,0,65389,28160,110,0,60260,28160,101,0,13589,28159,22,0,0,28159,0,0,29488,28160,49,0,65389,28160,110,0,65389,28160,110,0,52567,28160,88,0,6922,28159,11,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,255,0,65534,65280,255,0,65534,65280,255,0,65534,65280,255,0,65534,65280,255,0,65534,65280,255,0,65534,65280,255,0,65534,28160,0,31796,28160,53,0,65389,28160,110,0,65389,28160,110,0,65389,28160,110,0,65389,28160,110,0,65389,28160,110,0,65389,28160,110,0,65389,28160,110,0,57439,28160,96,0,6153,28159,10,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,6666,28159,11,0,51798,28160,87,0,65389,28160,110,0,65389,28160,110,0,27693,28159,46,0,0,28159,0,0,19744,28159,33,0,62311,28160,104,0,65389,28160,110,0,58721,28160,98,0,12307,28159,20,0,0,28159,0,0,30257,28160,50,0,65389,28160,110,0,65389,28160,110,0,53849,28160,90,0,7179,28159,12,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,255,0,65534,65280,255,0,65534,65280,255,0,65534,65280,255,0,65534,65280,255,0,65534,65280,255,0,65534,65280,255,0,65534,28160,0,54362,28160,91,0,65389,28160,110,0,65389,28160,110,0,47438,28160,79,0,19744,28159,33,0,34617,28160,58,0,65389,28160,110,0,65389,28160,110,0,57696,28160,97,0,6153,28159,10,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,6666,28159,11,0,51798,28160,87,0,65389,28160,110,0,65389,28160,110,0,27693,28159,46,0,0,28159,0,0,19744,28159,33,0,62311,28160,104,0,65389,28160,110,0,58721,28160,98,0,12307,28159,20,0,0,28159,0,0,15384,28159,25,0,35386,28160,59,0,36155,28160,60,0,27950,28159,47,0,3589,28159,6,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,255,0,65534,65280,255,0,65534,65280,255,0,65534,65280,255,0,65534,65280,255,0,65534,65280,255,0,65534,65280,255,0,65534,28160,0,59234,28160,99,0,65389,28160,110,0,65389,28160,110,0,20257,28159,34,0,0,28159,0,0,20000,28159,33,0,65389,28160,110,0,65389,28160,110,0,57696,28160,97,0,6153,28159,10,0,0,28159,0,0,2563,28159,4,0,5127,28159,8,0,4871,28159,8,0,3076,28159,5,0,0,28159,0,0,255,28159,0,0,3589,28159,6,0,5127,28159,8,0,4871,28159,8,0,2050,28159,3,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,1281,28159,2,0,6153,28159,10,0,7691,28159,12,0,2819,28159,4,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,6666,28159,11,0,51798,28160,87,0,65389,28160,110,0,65389,28160,110,0,27693,28159,46,0,0,28159,0,0,19744,28159,33,0,62311,28160,104,0,65389,28160,110,0,58721,28160,98,0,12307,28159,20,0,0,28159,0,0,1281,28159,2,0,3589,28159,6,0,4101,28159,6,0,2819,28159,4,0,255,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,255,28159,0,0,5127,28159,8,0,8204,28159,13,0,4614,28159,7,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,255,0,65534,28160,0,4358,28159,7,0,7948,28159,13,0,4871,28159,8,0,255,28159,1,511,0,65534,65280,255,0,65534,28160,0,58465,28160,98,0,65389,28160,110,0,65389,28160,110,0,20000,28159,33,0,0,28159,0,0,22308,28159,37,0,65389,28160,110,0,65389,28160,110,0,57696,28160,97,0,5640,28159,9,0,0,28159,0,0,31283,28160,52,0,57696,28160,97,0,55901,28160,94,0,39489,28160,66,0,0,28159,0,0,4614,28159,7,0,45130,28160,75,0,56926,28160,95,0,55131,28160,92,0,24103,28159,40,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,13077,28159,22,0,42566,28160,71,0,57952,28160,97,0,60003,28160,100,0,51285,28160,86,0,26667,28159,44,0,2306,28159,3,0,0,28159,0,0,0,28159,0,0,6666,28159,11,0,51798,28160,87,0,65389,28160,110,0,65389,28160,110,0,27693,28159,46,0,0,28159,0,0,19744,28159,33,0,62311,28160,104,0,65389,28160,110,0,58721,28160,98,0,12307,28159,20,0,0,28159,0,0,23847,28159,40,0,54106,28160,91,0,56413,28160,94,0,42823,28160,72,0,5640,28159,9,0,0,28159,0,0,0,28159,0,0,6409,28159,10,0,35642,28160,59,0,55644,28160,93,0,60516,28160,101,0,55131,28160,92,0,34360,28160,57,0,5640,28159,9,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,0,28159,0,0,5127,28159,8,0,33847,28160,56,0,54362,28160,91,0,60003,28160,100,0,55901,28160,94,0,36412,28160,61,0,7435,28159,29,7679,0,65534,28160,0,58465,28160,98,0,65389,28160,110,0,65389,28160,110,0,20513,28159,34,0,0,28159,0,0,22308,28159,37,0,65389,28160,110,0,65389,28160,110,0,57696,28160,97,0,5640,28159,9,0,0,28159,0,0,37694,28160,63,0,65389,28160,110,0,65389,28160,110,0,48208,28160,81,0,0,28159,0,0,5640,28159,9,0,54618,28160,91};
int n_idx = 0;
// for(int n_x = 0; n_x < 71; n_x +=1){
//     for(int n_y = 0; n_y < 25; n_y +=1){
//         n_idx+=1;
//         o_tft.drawPixel(n_x, n_y, a_n_u16[n_idx]);
//     }
// }

}

// char str[200];
// int n_frame = 0;
void loop() {
//     n_frame+=1;
//     // sprintf(str, "micros: %lu", micros());
//     // strcpy(o_text.s_text, str);
//     // f_update_o_text(&o_text, n_color_background);

//     // // o_text2.n_color = ILI9341_RED; 
//     // strcpy(o_text2.s_text, str);

//     // sprintf(str, "%c", (n_frame % 64) + 64);
//     // strcpy(o_text2.s_text, str);
//     // Serial.println(str);

//     // o_text2.n_cursor_x = (int)(( sin(0.1*((float)n_frame))*.5 + 0.5)*72.0);
//     // o_text2.n_cursor_y = (int)(( cos(0.3*((float)n_frame))*.5 + 0.5)*72.0);
//     // f_update_o_text(&o_text2, n_color_background);




//     delay(10000);
}